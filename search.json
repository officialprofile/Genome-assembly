[{"path":"index.html","id":"introduction","chapter":"1 Introduction","heading":"1 Introduction","text":"mini textbook describes (perhaps one say “describe”) selected algorithms play vital role de novo genome assembly related areas.premise book construct algorithms bottom along explaining gists. Naturally, applications included well.default code written R, python shell can appear point well.","code":""},{"path":"index.html","id":"prerequisites","chapter":"1 Introduction","heading":"1.1 Prerequisites","text":"assumed readerhas basic understanding genetics,basic understanding genetics,experience programming R,experience programming R,contact higher mathematics, e.g. probability, statistics, graph theory.contact higher mathematics, e.g. probability, statistics, graph theory.Reader also familiar pipe %>% syntax derived dplyr package.Throughout book following libraries used assumed reader loaded.","code":"\nlibrary(stringr)\nlibrary(dplyr)"},{"path":"bwt.html","id":"bwt","chapter":"2 Burrows-Wheeler transform","heading":"2 Burrows-Wheeler transform","text":"","code":""},{"path":"bwt.html","id":"introduction-1","chapter":"2 Burrows-Wheeler transform","heading":"2.1 Introduction","text":"[Description]","code":""},{"path":"bwt.html","id":"burrows-wheeler-matrix","chapter":"2 Burrows-Wheeler transform","heading":"2.2 Burrows-Wheeler matrix","text":"Consider following sequence:order create Burrows-Wheeler matrix given string first add dollar sign $ end sequence.Afterwards perform series shiftsThen sort sequences assumption dollar sign precedes lexicographically every symbol.putting every letterSequence bottom Burrows-Wheeler matrix called Burrows-Wheeler transform.","code":"\nsequence <- 'GATTACA'\nsequence  <- str_c(sequence, '$')\nsequences <- c(sequence)\nn         <- nchar(sequence)\n\nfor (i in 1:(n-1)){\n  sequence <- str_c(str_sub(sequence, 2, n),\n                    str_sub(sequence, 1, 1))\n  \n  sequences <- c(sequences, sequence)\n}\n\ncat(sequences, sep = '\\n')\n#> GATTACA$\n#> ATTACA$G\n#> TTACA$GA\n#> TACA$GAT\n#> ACA$GATT\n#> CA$GATTA\n#> A$GATTAC\n#> $GATTACA\nsequences <- sort(sequences) \ncat(sequences, sep = '\\n')\n#> $GATTACA\n#> A$GATTAC\n#> ACA$GATT\n#> ATTACA$G\n#> CA$GATTA\n#> GATTACA$\n#> TACA$GAT\n#> TTACA$GA\nbw.matrix           <- data.frame(matrix(, n, n))\ncolnames(bw.matrix) <- 1:n\n\nfor (i in 1:n){\n  bw.matrix[i, ] <- strsplit(sequences[i], split = '')[[1]]\n}\n\nknitr::kable(bw.matrix)\ntransform <- paste(bw.matrix[,n], collapse = '')\n\ncat('The Burrows-Wheeler transform of', \n    str_sub(sequence, 2, n), 'is', transform)\n#> The Burrows-Wheeler transform of GATTACA is ACTGA$TA"},{"path":"bwt.html","id":"inverse-transform","chapter":"2 Burrows-Wheeler transform","heading":"2.3 Inverse transform","text":"going reconstruct Burrows-Wheeler matrix initial sequence . order one first sort transformed sequence.Note string equal first column Burrrows-Wheeler transform. Also keep mind characters last first column adjacent.words, point set 2-mers., strictly rely fact Burrows-Wheeler matrix sorted lexicographically. allows us reconstruct remaining columns.2-mers (k-mers general) represent first two columns Burrows-Wheeler matrix.can derive last characters 2-mers following way:Finally move first column endOne can also verify bw.matrix bw.inverse fact .Additionally can encapsulate Burrows-Wheeler transform functionOne can verify output equal result obteined earlier.pure curiosity lets check Burrows-Wheeler transform longer sequence.Please note input string identical characters adjacent positions whereas transformed sequence situation appears quite often. substrings identical characters allow us represent sequence condensed manner.","code":"\nfirst.sequence <- strsplit(transform, split = '')[[1]] %>% sort\npaste(first.sequence, collapse = '')\n#> [1] \"$AAACGTT\"\nbw.inverse           <- data.frame(matrix(, n, 2))\ncolnames(bw.inverse) <- c(n, 1)\n\nbw.inverse[, 1] <- strsplit(transform, split = '')[[1]]\nbw.inverse[ ,2] <- first.sequence\n\nknitr::kable(bw.inverse)\nkmers <- apply(bw.inverse, 1, \n               function(x) paste(x, collapse = ''))\nkmers\n#> [1] \"A$\" \"CA\" \"TA\" \"GA\" \"AC\" \"$G\" \"TT\" \"AT\"\nkmers <- sort(kmers)\nkmers\n#> [1] \"$G\" \"A$\" \"AC\" \"AT\" \"CA\" \"GA\" \"TA\" \"TT\"\nsapply(kmers, function(x) str_sub(x, 2, 2), \n       simplify = TRUE, USE.NAMES = FALSE)\n#> [1] \"G\" \"$\" \"C\" \"T\" \"A\" \"A\" \"A\" \"T\"\nfor (i in 2:(n-1)){\n  kmers             <- apply(bw.inverse, 1, \n                             function(x) paste(x, collapse = ''))\n  kmers             <- sort(kmers)\n  bw.inverse[, i+1] <- sapply(kmers, function(x) str_sub(x, i, i), \n                              simplify = TRUE, USE.NAMES = FALSE)\n  colnames(bw.inverse)[i+1] = i\n}\nknitr::kable(bw.inverse)\nbw.inverse[,n+1] <- bw.inverse[, 1]\nbw.inverse       <- bw.inverse[,2:(n+1)]\ncolnames(bw.inverse)[n] = n\n\nknitr::kable(bw.inverse)\nknitr::kable(bw.inverse == bw.matrix)\nBWT <- function(sequence){\n  sequence  <- str_c(sequence, '$')\n  sequences <- c(sequence)\n  n         <- nchar(sequence)\n\n  for (i in 1:(n-1)){\n    sequence <- str_c(str_sub(sequence, 2, n),\n                     str_sub(sequence, 1, 1))\n    sequences <- c(sequences, sequence)\n  }\n  sequences <- sort(sequences) \n  \n  bw.matrix           <- data.frame(matrix(, n, n))\n  colnames(bw.matrix) <- 1:n\n\n  for (i in 1:n){\n    bw.matrix[i, ] <- strsplit(sequences[i], split = '')[[1]]\n  }\n  return(paste(bw.matrix[,n], collapse = ''))\n}\nBWT('GATTACA')\n#> [1] \"ACTGA$TA\"\nBWT('ATGCTCGTGCCATCATATAGCGCGCGCGCGATCTCTACGCGCG')\n#> [1] \"GTTTCCG$TCGGGGGAGGGTTGTCCTCCCCCCATCCAAACCAGA\""},{"path":"bwt.html","id":"applications","chapter":"2 Burrows-Wheeler transform","heading":"2.4 Applications","text":"","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
